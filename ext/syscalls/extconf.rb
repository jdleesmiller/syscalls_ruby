require 'mkmf'
require 'erb'

#
# sys/syscall.h comes from glibc; it lists the SYS_ constants; see
# http://www.delorie.com/gnu/docs/glibc/libc_556.html
#
raise "cannot find sys/syscall.h" unless have_header('sys/syscall.h')

#
# use "gcc -E -dD" on a file that includes sys/syscall.h to get the preprocessor
# output (including defines, due to -dD); this gives us a list of SYS_call
# constants
#
# the reasons for not just reading in syscall.h directly are that (1) we don't
# always know where it is, and (2) some of the constants are conditioned out at
# compile time (e.g. 32-bit vs. 64-bit); running it through the gcc preprocessor
# solves these problems
#
# the call to RbConfig::expand is based on cc_command in mkmf.rb from 1.9.2p290;
# we do this to ensure that we use the right gcc flags
#
conf = RbConfig::CONFIG.merge('hdrdir' => $hdrdir.quote,
                              'srcdir' => $srcdir.quote,
                              'arch_hdrdir' => "#$arch_hdrdir",
                              'top_srcdir' => ($top_srcdir || '').quote)
cmd = RbConfig::expand(
  "$(CC) #$INCFLAGS #$CPPFLAGS #$CFLAGS #$ARCH_FLAG -E -dD -", conf)
lines = IO.popen(cmd, 'r+') {|io|
  io.puts "#include <sys/syscall.h>"
  io.close_write
  io.readlines
}

syscall_names = lines.map {|l| $1 if l =~ /#define\s+(SYS_\S+)\s+/}.compact

#
# generate the extension 
#
File.open('syscalls.c', 'w') do |f|
  template = ERB.new(<<EOF)
/* THIS FILE IS GENERATED BY extconf.rb */
#include <ruby.h>
#include <sys/syscall.h>

#include "syscall_wrapper.inc"

void
Init_syscalls(void)
{
    VALUE mod = rb_define_module("Syscalls");
    rb_define_singleton_method(mod, "syscall", syscalls_syscall, -1);
<% syscall_names.each do |name| %>
    rb_define_const(mod, "<%= name %>", INT2FIX(<%= name %>));
<% end %>
}
EOF
  f.puts template.result(binding)
end

create_makefile('syscalls/syscalls')
